# SPDX-FileCopyrightText: 2023 - 2024 Gabriele Pongelli
#
# SPDX-License-Identifier: MIT

# Publish package on main branch if it's tagged with '*.*.*'

name: release & publish workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    tags:
      - '*.*.*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "release"
  release:
    name: Create Release
    runs-on: ubuntu-20.04

    # Trusted Publisher: Specifying a GitHub environment is optional, but strongly encouraged
    #  needed setup @ pypi project's page
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      pages: write

    strategy:
      matrix:
        python-versions: [3.11]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # https://github.com/BinPar/read-conventional-commit-changelog
      - name: Get Changelog Entry
        id: changelog
        uses: BinPar/read-conventional-commit-changelog@v2.0.2

      # https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
      - name: Install Poetry
        run: pipx install poetry

      # https://github.com/actions/setup-python
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          python -m ensurepip --upgrade
          poetry install --with devel --sync

      # Build and publish documentation
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: build documentation
        run: poetry run nox -e docs

      - name: Upload Sphinx doc artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: './docs/build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Build wheels and source tarball
        run: >-
          poetry run nox -e build

      - name: show temporary files
        run: >-
          ls -l

      # https://github.com/softprops/action-gh-release
      - name: create github release
        id: create_release
        uses: softprops/action-gh-release@v2.0.4
        with:
          token: ${{ secrets.make_gh_release_token }}
          body: ${{ steps.changelog.outputs.version-changelog }}
          files: dist/*.whl
          draft: false
          prerelease: false

      # https://github.com/pypa/gh-action-pypi-publish
      - name: publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

      ########################
      ## Docker image stage ##
      ########################
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      ## ref. https://github.com/gpongelli/manylinux-python/blob/main/.github/workflows/build_manylinux.yml
      # setup cross compilation action https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # login to docker action, to then push (in this case into python script) https://github.com/docker/login-action
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: get authors from toml
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml_authors
        with:
          file: 'pyproject.toml'
          field: 'tool.poetry.authors'

      - name: get description from toml
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml_descr
        with:
          file: 'pyproject.toml'
          field: 'tool.poetry.description'

      - name: Get Timestamp
        uses: nanzm/get-time-action@master
        id: build_timestamp
        with:
          timeZone: UTC
          format: 'YYYY-MM-DDTHH:mm:ssZ'


      # in case of static docker image building, https://github.com/marketplace/actions/docker-build-push-action
      #  github action is better  ( https://github.com/docker/build-push-action )
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          build-args: |
              IMAGE_TIMESTAMP=${{ steps.build_timestamp.outputs.time }}
              IMAGE_AUTHORS=${{ steps.read_toml_authors.outputs.value }}
              PKG_VERSION=${{ github.ref_name }}
              IMAGE_GIT_HASH=${{ github.sha }}
              IMAGE_DESCRIPTION=${{ steps.read_toml_descr.outputs.value }}
          tags: gpongelli/python-active-versions:${{ github.ref_name }}

      #  upload readme.md to dockerhub https://github.com/peter-evans/dockerhub-description
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: gpongelli/python-active-versions
