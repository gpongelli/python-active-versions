# SPDX-FileCopyrightText: 2024 Gabriele Pongelli
#
# SPDX-License-Identifier: MIT

# This is a basic workflow to help you get started with Actions

name: container workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# permission for trivy action
permissions:
  security-events: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    strategy:
      matrix:
        python-versions: [3.12]
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
      - name: Install Poetry
        run: pipx install poetry

      # https://github.com/actions/setup-python
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          python -m ensurepip --upgrade
          poetry lock --no-update
          poetry install --with devel  --sync

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

      # build image and do trivy check
      - name: get authors from toml
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml_authors
        with:
          file: 'pyproject.toml'
          field: 'tool.poetry.authors'

      - name: get description from toml
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml_descr
        with:
          file: 'pyproject.toml'
          field: 'tool.poetry.description'

      - name: get version from toml
        uses: SebRollen/toml-action@v1.2.0
        id: read_toml_version
        with:
          file: 'pyproject.toml'
          field: 'tool.poetry.version'

      - name: Get Timestamp
        uses: nanzm/get-time-action@master
        id: build_timestamp
        with:
          timeZone: UTC
          format: 'YYYY-MM-DDTHH:mm:ssZ'

      # in case of static docker image building, https://github.com/marketplace/actions/docker-build-push-action
      #  github action is better  ( https://github.com/docker/build-push-action )
      - name: Build container
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          build-args: |
              IMAGE_TIMESTAMP=${{ steps.build_timestamp.outputs.time }}
              IMAGE_AUTHORS=${{ join(fromJSON(steps.read_toml_authors.outputs.value), ', ') }}
              PKG_VERSION=${{ steps.read_toml_version.outputs.value }}
              IMAGE_GIT_HASH=${{ github.sha }}
              IMAGE_DESCRIPTION=${{ steps.read_toml_descr.outputs.value }}
          tags: gpongelli/python-active-versions:${{ github.sha }}


      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'gpongelli/python-active-versions:${{ github.sha }}'
          trivy-config: trivy.yaml
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Container Scanning - Trivy'
          sha: ${{ github.sha }}
          ref: refs/heads/${{ github.head_ref || github.ref_name || 'main' }}
